{"version":3,"sources":["webpack:///hamsters.node.min.js","webpack:///webpack/bootstrap db9b7d2b6c8f99a07d9a","webpack:///./src/core/data.js","webpack:///./src/core/habitat.js","webpack:///./src/core/logger.js","webpack:///./src/core/version.js","webpack:///./src/core/wheel.js","webpack:///./src/core/memoizer.js","webpack:///./src/core/pool.js","webpack:///./src/hamsters.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_habitat","_habitat2","_logger","_logger2","data","this","randomArray","aggregateArrays","aggregateThreadOutputs","splitArrays","splitArrayIntoSubArrays","createBlob","createDataBlob","generateBlob","generateWorkerBlob","processDataType","sortOutput","sortArray","getOutput","prepareOutput","prepareJob","prepareFunction","feedHamster","messageWorker","prepareMeal","prepareHamsterFood","workerURI","value","task","hamsterFood","input","hasOwnProperty","array","hamstersJob","hamster","reactNative","postMessage","JSON","stringify","ie10","webWorker","port","prepareTransferBuffers","buffers","transferrable","buffer","push","Array","isArray","ArrayBuffer","functionBody","legacy","String","startingIndex","indexOf","endingIndex","substring","workerLogic","functionString","hamsterBlob","URL","createObjectURL","dataType","typedArrayFromBuffer","aggregate","threads","output","arr","order","sort","a","b","reverse","types","uint32","Uint32Array","uint16","Uint16Array","uint8","Uint8Array","uint8clamped","Uint8ClampedArray","int32","Int32Array","int16","Int16Array","int8","Int8Array","float32","Float32Array","float64","Float64Array","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","error","textContent","Blob","BlobMaker","locateBlobBuilder","blob","append","type","getBlob","count","onSuccess","Math","round","random","reduce","concat","len","bufferLength","offset","set","n","threadArrays","size","ceil","slice","subarray","hamstersData","_typeof","Symbol","iterator","constructor","_data","_data2","habitat","debug","importScripts","memoize","persistence","isLegacyEnvironment","browser","isBrowser","isWebWorker","node","isNode","isReactNative","shell","isShell","supportsTransferrableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isIE","isInternetExplorer","logicalThreads","determineGlobalThreads","Worker","locateWorkerObject","sharedWorker","locateSharedWorkerObject","max","navigator","hardwareConcurrency","userAgent","toLowerCase","os","cpus","SharedWorker","window","version","RegExp","isNaN","test","process","global","isIE10","lacksWorkerSupport","legacyAgents","workerBlob","e","SharedArrayBuffer","Proxy","hamstersHabitat","_version","_version2","logger","logBook","warning","info","infoLog","warningLog","errorLog","errorFromThread","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","searchLogEntries","searchLogBook","message","timeStamp","Date","now","timeStampedMessage","console","warn","reject","errorMessage","lineno","filename","eventType","logBookEntries","string","searchResults","searchString","eventTypeResults","tmpEntries","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","results","hamstersLogger","majorVersion","minorVersion","patchVersion","hamstersVersion","wheel","worker","workerScaffold","regular","regularScaffold","legacyScaffold","self","params","rtn","addEventListener","incomingConnection","ports","start","incomingMessage","threadStart","eval","threadEnd","prepareReturn","returnObject","Function","resolve","_this","setTimeout","hamstersWheel","memoizer","maxCacheEntries","cacheEntries","itemCached","isItemCached","fetchItem","fetchItemFromCache","saveItem","saveItemToCache","method","fn","cacheItem","cachedResult","cache","itemToCache","cachedItems","splice","hamstersMemoizer","_wheel","_wheel2","pool","tasks","running","pending","fetchHamster","grabHamster","selectHamsterWheel","arguments","item","runTask","threadId","spawnHamster","workers","index","maxThreads","log","threadArray","registerTask","keepTrackOfThread","trainHamster","addWorkToPending","onThreadResponse","parse","returnOutputAndRemoveTask","processQueue","shift","terminate","onThreadError","onmessage","onerror","Promise","hamsterWheel","hamsterPool","_pool","_pool2","_memoizer","_memoizer2","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","processStartOptions","spawnHamsters","habitatKeys","functionToRun","scope","hamstersTask","scheduleTask","scaffold","then","catch","messsage","onError","hamsters"],"mappings":"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","file":"hamsters.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(8);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\tvar _habitat = __webpack_require__(2);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _logger = __webpack_require__(3);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t'use strict';\n\t\n\tvar data = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function data() {\n\t    _classCallCheck(this, data);\n\t\n\t    this.randomArray = this.randomArray;\n\t    this.aggregateArrays = this.aggregateThreadOutputs;\n\t    this.splitArrays = this.splitArrayIntoSubArrays;\n\t    this.createBlob = this.createDataBlob;\n\t    this.generateBlob = this.generateWorkerBlob;\n\t    this.processDataType = this.processDataType;\n\t    this.sortOutput = this.sortArray;\n\t    this.getOutput = this.prepareOutput;\n\t    this.prepareJob = this.prepareFunction;\n\t    this.feedHamster = this.messageWorker;\n\t    this.prepareMeal = this.prepareHamsterFood;\n\t    this.workerURI = null;\n\t  }\n\t\n\t  /**\n\t  * @function prepareHamsterFood - Prepares message to send to thread(s)\n\t  * @param {object} task - Task to process\n\t  */\n\t\n\t\n\t  _createClass(data, [{\n\t    key: 'prepareHamsterFood',\n\t    value: function prepareHamsterFood(task) {\n\t      var hamsterFood = task.input;\n\t      for (var key in task.input) {\n\t        if (task.input.hasOwnProperty(key) && key !== 'array') {\n\t          hamsterFood[key] = task.input[key];\n\t        }\n\t      }\n\t      hamsterFood.array = task.input.array;\n\t      if (task.hamstersJob && !hamsterFood.hamstersJob) {\n\t        hamsterFood.hamstersJob = hamstersJob;\n\t      }\n\t      return hamsterFood;\n\t    }\n\t\n\t    /**\n\t    * @function messageWorker - Prepares message to send to thread\n\t    * @param {worker} hamster - Thread to message\n\t    * @param {object} hamsterFood - Message to send to thread\n\t    */\n\t\n\t  }, {\n\t    key: 'messageWorker',\n\t    value: function messageWorker(hamster, hamsterFood) {\n\t      if (_habitat2.default.reactNative) {\n\t        return hamster.postMessage(JSON.stringify(hamsterFood));\n\t      }\n\t      if (_habitat2.default.ie10) {\n\t        return hamster.postMessage(hamsterFood);\n\t      }\n\t      if (_habitat2.default.webWorker) {\n\t        return hamster.port.postMessage(hamsterFood);\n\t      }\n\t      return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood));\n\t    }\n\t\n\t    /**\n\t    * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n\t    * @param {object} hamsterFood - Message to send to thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareTransferBuffers',\n\t    value: function prepareTransferBuffers(hamsterFood) {\n\t      var buffers = [];\n\t      var key = null;\n\t      if (_habitat2.default.transferrable) {\n\t        for (key in hamsterFood) {\n\t          if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n\t            if (hamsterFood[key].buffer) {\n\t              buffers.push(hamsterFood[key].buffer);\n\t            } else if (Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n\t              buffers.push(new ArrayBuffer(hamsterFood[key]));\n\t            }\n\t          }\n\t        }\n\t      }\n\t      return buffers;\n\t    }\n\t\n\t    /**\n\t    * @function prepareFunction - Prepares transferrable buffers for faster message passing\n\t    * @param {function} functionBody - Message to send to thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareFunction',\n\t    value: function prepareFunction(functionBody) {\n\t      if (!_habitat2.default.legacy) {\n\t        functionBody = String(functionBody);\n\t        if (!_habitat2.default.webWorker) {\n\t          var startingIndex = functionBody.indexOf(\"{\") + 1;\n\t          var endingIndex = functionBody.length - 1;\n\t          return functionBody.substring(startingIndex, endingIndex);\n\t        }\n\t      }\n\t      return functionBody;\n\t    }\n\t\n\t    /**\n\t    * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n\t    * @param {function} workerLogic - Scaffold to use within worker thread\n\t    */\n\t\n\t  }, {\n\t    key: 'generateWorkerBlob',\n\t    value: function generateWorkerBlob(workerLogic) {\n\t      var functionString = '(' + String(workerLogic) + ')();';\n\t      var hamsterBlob = this.createBlob(functionString);\n\t      return URL.createObjectURL(hamsterBlob);\n\t    }\n\t\n\t    /**\n\t    * @function processDataType - Converts buffer into new typed array\n\t    * @param {string} dataType - Typed array type for this task\n\t    * @param {object} buffer - Buffer to convert\n\t    */\n\t\n\t  }, {\n\t    key: 'processDataType',\n\t    value: function processDataType(dataType, buffer) {\n\t      if (_habitat2.default.transferrable) {\n\t        return this.typedArrayFromBuffer(dataType, buffer);\n\t      }\n\t      return buffer;\n\t    }\n\t\n\t    /**\n\t    * @function prepareOutput - Prepares final task output\n\t    * @param {task} buffer - Task to prepare output for\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareOutput',\n\t    value: function prepareOutput(task) {\n\t      if (task.aggregate && task.threads !== 1) {\n\t        return this.aggregateThreadOutputs(task.output, task.dataType);\n\t      }\n\t      return task.output;\n\t    }\n\t\n\t    /**\n\t    * @function sortArray - Sorts array by defined order\n\t    * @param {object} arr - Array to sort\n\t    * @param {string} order - Defined sort order\n\t    */\n\t\n\t  }, {\n\t    key: 'sortArray',\n\t    value: function sortArray(arr, order) {\n\t      switch (order) {\n\t        case 'desc':\n\t        case 'asc':\n\t          return Array.prototype.sort.call(arr, function (a, b) {\n\t            return order === 'asc' ? a - b : b - a;\n\t          });\n\t        case 'ascAlpha':\n\t          return arr.sort();\n\t        case 'descAlpha':\n\t          return arr.reverse();\n\t        default:\n\t          return arr;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function typedArrayFromBuffer - Converts buffer into new typed array\n\t    * @param {string} dataType - Typed array type for this task\n\t    * @param {object} buffer - Buffer to convert\n\t    */\n\t\n\t  }, {\n\t    key: 'typedArrayFromBuffer',\n\t    value: function typedArrayFromBuffer(dataType, buffer) {\n\t      var types = {\n\t        'uint32': Uint32Array,\n\t        'uint16': Uint16Array,\n\t        'uint8': Uint8Array,\n\t        'uint8clamped': Uint8ClampedArray,\n\t        'int32': Int32Array,\n\t        'int16': Int16Array,\n\t        'int8': Int8Array,\n\t        'float32': Float32Array,\n\t        'float64': Float64Array\n\t      };\n\t      if (!types[dataType]) {\n\t        return dataType;\n\t      }\n\t      return new types[dataType](buffer);\n\t    }\n\t\n\t    /**\n\t    * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n\t    */\n\t\n\t  }, {\n\t    key: 'locateBlobBuilder',\n\t    value: function locateBlobBuilder() {\n\t      if (typeof BlobBuilder !== 'undefined') {\n\t        return BlobBuilder;\n\t      }\n\t      if (typeof WebKitBlobBuilder !== 'undefined') {\n\t        return WebKitBlobBuilder;\n\t      }\n\t      if (typeof MozBlobBuilder !== 'undefined') {\n\t        return MozBlobBuilder;\n\t      }\n\t      if (typeof MSBlobBuilder !== 'undefined') {\n\t        return MSBlobBuilder;\n\t      }\n\t      return _logger2.default.error('Environment does not support data blobs!');\n\t    }\n\t\n\t    /**\n\t    * @function createDataBlob - Creates new data blob from textContent\n\t    * @param {string} textContent - Provided text content for blob\n\t    */\n\t\n\t  }, {\n\t    key: 'createDataBlob',\n\t    value: function createDataBlob(textContent) {\n\t      if (typeof Blob === 'undefined') {\n\t        var BlobMaker = this.locateBlobBuilder();\n\t        var blob = new BlobMaker();\n\t        blob.append([textContent], {\n\t          type: 'application/javascript'\n\t        });\n\t        return blob.getBlob();\n\t      }\n\t      return new Blob([textContent], {\n\t        type: 'application/javascript'\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @function randomArray - Creates new random array\n\t    * @param {number} count - Number of random elements in array\n\t    * @param {function} onSuccess - onSuccess callback\n\t    */\n\t\n\t  }, {\n\t    key: 'randomArray',\n\t    value: function randomArray(count, onSuccess) {\n\t      var randomArray = [];\n\t      while (count > 0) {\n\t        randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n\t        count -= 1;\n\t      }\n\t      onSuccess(randomArray);\n\t    }\n\t\n\t    /**\n\t    * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n\t    * @param {array} input - Array of arrays to aggregate\n\t    * @param {string} dataType - Data type to use for typed array\n\t    */\n\t\n\t  }, {\n\t    key: 'aggregateThreadOutputs',\n\t    value: function aggregateThreadOutputs(input, dataType) {\n\t      if (!dataType || !_habitat2.default.transferrable) {\n\t        return input.reduce(function (a, b) {\n\t          return a.concat(b);\n\t        });\n\t      }\n\t      var i = 0;\n\t      var len = input.length;\n\t      var bufferLength = 0;\n\t      for (i; i < len; i += 1) {\n\t        bufferLength += input[i].length;\n\t      }\n\t      var output = this.processDataType(dataType, bufferLength);\n\t      var offset = 0;\n\t      for (i = 0; i < len; i += 1) {\n\t        output.set(input[i], offset);\n\t        offset += input[i].length;\n\t      }\n\t      return output;\n\t    }\n\t\n\t    /**\n\t    * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n\t    * @param {array} array - Array to split\n\t    * @param {number} n - Number of subarrays to create\n\t    */\n\t\n\t  }, {\n\t    key: 'splitArrayIntoSubArrays',\n\t    value: function splitArrayIntoSubArrays(array, n) {\n\t      var i = 0;\n\t      var threadArrays = [];\n\t      var size = Math.ceil(array.length / n);\n\t      if (array.slice) {\n\t        while (i < array.length) {\n\t          threadArrays.push(array.slice(i, i += size));\n\t        }\n\t      } else {\n\t        while (i < array.length) {\n\t          threadArrays.push(array.subarray(i, i += size));\n\t        }\n\t      }\n\t      return threadArrays;\n\t    }\n\t  }]);\n\t\n\t  return data;\n\t}();\n\t\n\tvar hamstersData = new data();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersData;\n\t}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\tvar _data = __webpack_require__(1);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t'use strict';\n\t\n\tvar habitat = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function habitat() {\n\t    _classCallCheck(this, habitat);\n\t\n\t    this.debug = false;\n\t    this.importScripts = null;\n\t    this.memoize = false;\n\t    this.persistence = true;\n\t    this.legacy = this.isLegacyEnvironment() || false;\n\t    this.browser = this.isBrowser();\n\t    this.webWorker = this.isWebWorker();\n\t    this.node = this.isNode();\n\t    this.reactNative = this.isReactNative();\n\t    this.shell = this.isShell();\n\t    this.transferrable = this.supportsTransferrableObjects();\n\t    this.atomics = this.supportsAtomicOperations();\n\t    this.proxies = this.supportsProxies();\n\t    this.isIE = this.isInternetExplorer;\n\t    this.logicalThreads = this.determineGlobalThreads();\n\t    this.Worker = this.locateWorkerObject();\n\t    this.sharedWorker = this.locateSharedWorkerObject();\n\t  }\n\t\n\t  /**\n\t  * @function determineGlobalThreads - Determines max number of threads to use\n\t  */\n\t\n\t\n\t  _createClass(habitat, [{\n\t    key: 'determineGlobalThreads',\n\t    value: function determineGlobalThreads() {\n\t      var max = 4;\n\t      if (typeof navigator !== 'undefined') {\n\t        if (typeof navigator.hardwareConcurrency !== 'undefined') {\n\t          max = navigator.hardwareConcurrency;\n\t        }\n\t        if (max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n\t          max = 20;\n\t        }\n\t      }\n\t      if (this.isNode() && typeof os !== 'undefined') {\n\t        max = os.cpus().length;\n\t      }\n\t      return max;\n\t    }\n\t\n\t    /**\n\t    * @function locateWorkerObject - Attempts to find a global Worker object\n\t    */\n\t\n\t  }, {\n\t    key: 'locateWorkerObject',\n\t    value: function locateWorkerObject() {\n\t      return typeof Worker !== 'undefined' ? Worker : null;\n\t    }\n\t\n\t    /**\n\t    * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n\t    */\n\t\n\t  }, {\n\t    key: 'locateSharedWorkerObject',\n\t    value: function locateSharedWorkerObject() {\n\t      return typeof SharedWorker !== 'undefined' ? SharedWorker : null;\n\t    }\n\t\n\t    /**\n\t    * @function isBrowser - Detects if execution environment is a browser\n\t    */\n\t\n\t  }, {\n\t    key: 'isBrowser',\n\t    value: function isBrowser() {\n\t      return (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === \"object\";\n\t    }\n\t\n\t    /**\n\t    * @function isInternetExplorer - Detects if execution environment is internet explorer\n\t    */\n\t\n\t  }, {\n\t    key: 'isInternetExplorer',\n\t    value: function isInternetExplorer(version) {\n\t      return new RegExp('msie' + (!isNaN(version) ? '\\\\s' + version : ''), 'i').test(navigator.userAgent);\n\t    }\n\t\n\t    /**\n\t    * @function isNode - Detects if execution environment is node.js\n\t    */\n\t\n\t  }, {\n\t    key: 'isNode',\n\t    value: function isNode() {\n\t      return (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === \"object\" && \"function\" === \"function\" && !this.isBrowser() && !this.isWebWorker();\n\t    }\n\t\n\t    /**\n\t    * @function isWebWorker - Detects if execution environment is a webworker\n\t    */\n\t\n\t  }, {\n\t    key: 'isWebWorker',\n\t    value: function isWebWorker() {\n\t      return typeof importScripts === \"function\";\n\t    }\n\t\n\t    /**\n\t    * @function isReactNative - Detects if execution environment is reactNative\n\t    */\n\t\n\t  }, {\n\t    key: 'isReactNative',\n\t    value: function isReactNative() {\n\t      return !this.isNode() && (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object';\n\t    }\n\t\n\t    /**\n\t    * @function isShell - Detects if execution environment is a shell\n\t    */\n\t\n\t  }, {\n\t    key: 'isShell',\n\t    value: function isShell() {\n\t      return this.isBrowser() && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n\t    }\n\t\n\t    /**\n\t    * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n\t    */\n\t\n\t  }, {\n\t    key: 'isLegacyEnvironment',\n\t    value: function isLegacyEnvironment() {\n\t      // Force legacy mode for known devices that don't support threading\n\t      if (this.isBrowser() && !this.isReactNative()) {\n\t        var isIE10 = this.isInternetExplorer(10);\n\t        var userAgent = navigator.userAgent;\n\t        var lacksWorkerSupport = typeof this.Worker === 'undefined';\n\t        var legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n\t        if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1 || isIE10) {\n\t          this.legacy = true;\n\t        }\n\t      }\n\t      // Detect sharedWorker support for use within webworkers\n\t      if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n\t        try {\n\t          var workerBlob = _data2.default.generateBlob();\n\t          var SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n\t        } catch (e) {\n\t          this.legacy = true;\n\t        }\n\t      }\n\t      // Final check, if we're in a shell environment or we have no worker object use legacy mode\n\t      if (!this.legacy) {\n\t        return this.isShell() || !this.locateWorkerObject();\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsTransferrableObjects',\n\t    value: function supportsTransferrableObjects() {\n\t      return typeof Uint8Array !== 'undefined';\n\t    }\n\t\n\t    /**\n\t    * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsAtomicOperations',\n\t    value: function supportsAtomicOperations() {\n\t      return typeof SharedArrayBuffer !== 'undefined';\n\t    }\n\t\n\t    /**\n\t    * @function supportsProxies - Detects if execution environment supports proxy objects\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsProxies',\n\t    value: function supportsProxies() {\n\t      return typeof Proxy !== 'undefined';\n\t    }\n\t  }]);\n\t\n\t  return habitat;\n\t}();\n\t\n\tvar hamstersHabitat = new habitat();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersHabitat;\n\t}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\tvar _version = __webpack_require__(4);\n\t\n\tvar _version2 = _interopRequireDefault(_version);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t'use strict';\n\t\n\tvar logger = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function logger() {\n\t    _classCallCheck(this, logger);\n\t\n\t    this.logBook = {\n\t      error: [],\n\t      warning: [],\n\t      info: []\n\t    };\n\t    this.info = this.infoLog;\n\t    this.warning = this.warningLog;\n\t    this.error = this.errorLog;\n\t    this.errorFromThread = this.errorFromThread;\n\t    this.saveLogEntry = this.saveToLogBook;\n\t    this.getLogEntries = this.fetchLogBook;\n\t    this.searchLogEntries = this.searchLogBook;\n\t  }\n\t\n\t  _createClass(logger, [{\n\t    key: 'infoLog',\n\t    value: function infoLog(message) {\n\t      var timeStamp = Date.now();\n\t      var timeStampedMessage = 'Hamsters.js v' + _version2.default + ' Info: ' + message + ' @ ' + timeStamp;\n\t      this.saveLogEntry('info', timeStampedMessage);\n\t      console.info(timeStampedMessage);\n\t    }\n\t  }, {\n\t    key: 'warningLog',\n\t    value: function warningLog(message) {\n\t      var timeStamp = Date.now();\n\t      var timeStampedMessage = 'Hamsters.js v' + _version2.default + ' Warning: ' + message + ' @ ' + timeStamp;\n\t      this.saveLogEntry('warning', timeStampedMessage);\n\t      console.warn(timeStampedMessage);\n\t    }\n\t  }, {\n\t    key: 'errorLog',\n\t    value: function errorLog(message, reject) {\n\t      var timeStamp = Date.now();\n\t      var timeStampedMessage = 'Hamsters.js v' + _version2.default + ' Error: ' + message + ' @ ' + timeStamp;\n\t      this.saveLogEntry('error', timeStampedMessage);\n\t      console.error(timeStampedMessage);\n\t      if (reject) {\n\t        reject(timeStampedMessage);\n\t      } else {\n\t        return timeStampedMessage;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'errorFromThread',\n\t    value: function errorFromThread(error, reject) {\n\t      var errorMessage = '#' + error.lineno + ' in ' + error.filename + ': ' + error.message;\n\t      this.errorLog(errorMessage, reject);\n\t    }\n\t  }, {\n\t    key: 'saveToLogBook',\n\t    value: function saveToLogBook(eventType, message) {\n\t      this.logBook[eventType].push(message);\n\t    }\n\t  }, {\n\t    key: 'fetchLogBook',\n\t    value: function fetchLogBook(eventType) {\n\t      if (eventType) {\n\t        return this.logBook[eventType];\n\t      }\n\t      return this.logBook;\n\t    }\n\t  }, {\n\t    key: 'findStringInLogBook',\n\t    value: function findStringInLogBook(logBookEntries, string) {\n\t      var searchResults = [];\n\t      var i = 0;\n\t      for (i; i < logBookEntries.length; i++) {\n\t        if (logBookEntries[i].indexOf(string) !== -1) {\n\t          searchResults.push(logBookEntries[i]);\n\t        }\n\t      }\n\t      return searchResults;\n\t    }\n\t  }, {\n\t    key: 'findStringInLogBookAllTypes',\n\t    value: function findStringInLogBookAllTypes(logBook, searchString) {\n\t      var searchResults = [];\n\t      var key = void 0,\n\t          eventTypeResults = void 0,\n\t          tmpEntries = null;\n\t      for (key in logBook) {\n\t        if (logBook.hasOwnProperty(key)) {\n\t          tmpEntries = logBook[key];\n\t          eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n\t        }\n\t      }\n\t      return searchResults;\n\t    }\n\t  }, {\n\t    key: 'searchLogBook',\n\t    value: function searchLogBook(searchString, eventType) {\n\t      var finalResults = [];\n\t      if (eventType) {\n\t        finalResults = this.findStringInLogBook(this.logBook[eventType], string);\n\t      } else {\n\t        finalResults = this.findStringInLogBookAllTypes(this.logBook);\n\t      }\n\t      return {\n\t        total: finalResults.length,\n\t        results: finalResults\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return logger;\n\t}();\n\t\n\tvar hamstersLogger = new logger();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersLogger;\n\t}\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/*\n\t* Title: Hamsters.js\n\t* Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers\n\t* Author: Austin K. Smith\n\t* Contact: austin@asmithdev.com\n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com\n\t* License: Artistic License 2.0\n\t*/\n\t\n\t'use strict';\n\t\n\tvar majorVersion = 5;\n\tvar minorVersion = 1;\n\tvar patchVersion = 1;\n\tvar hamstersVersion = majorVersion + '.' + minorVersion + '.' + patchVersion;\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersVersion;\n\t}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\tvar _data = __webpack_require__(1);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _habitat = __webpack_require__(2);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t'use strict';\n\t\n\tvar wheel = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function wheel() {\n\t    _classCallCheck(this, wheel);\n\t\n\t    this.worker = this.workerScaffold;\n\t    this.regular = this.regularScaffold;\n\t    this.legacy = this.legacyScaffold;\n\t  }\n\t\n\t  /**\n\t  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n\t  */\n\t\n\t\n\t  _createClass(wheel, [{\n\t    key: 'workerScaffold',\n\t    value: function workerScaffold() {\n\t      'use strict';\n\t\n\t      if (typeof self === 'undefined') {\n\t        self = global || window || this;\n\t      }\n\t\n\t      self.params = {};\n\t      self.rtn = {};\n\t\n\t      addEventListener('connect', function (incomingConnection) {\n\t        var port = incomingConnection.ports[0];\n\t        port.start();\n\t        port.addEventListener('message', function (incomingMessage) {\n\t          params = incomingMessage.data;\n\t          rtn = {\n\t            data: [],\n\t            dataType: params.dataType,\n\t            threadStart: Date.now()\n\t          };\n\t          if (params.importScripts) {\n\t            self.importScripts(params.importScripts);\n\t          }\n\t          eval(\"(\" + params.hamstersJob + \")\")();\n\t          rtn.threadEnd = Date.now();\n\t          port.postMessage(rtn);\n\t        }, false);\n\t      }, false);\n\t    }\n\t\n\t    /**\n\t    * @function workerScaffold - Provides worker body for library functionality\n\t    */\n\t\n\t  }, {\n\t    key: 'regularScaffold',\n\t    value: function regularScaffold() {\n\t      'use strict';\n\t\n\t      if (typeof self === 'undefined') {\n\t        var _self = global || window || this;\n\t      }\n\t\n\t      self.params = {};\n\t      self.rtn = {};\n\t\n\t      function prepareReturn(returnObject) {\n\t        var dataType = returnObject.dataType;\n\t        if (dataType) {\n\t          returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n\t        }\n\t        return returnObject;\n\t      }\n\t\n\t      function typedArrayFromBuffer(dataType, buffer) {\n\t        var types = {\n\t          'uint32': Uint32Array,\n\t          'uint16': Uint16Array,\n\t          'uint8': Uint8Array,\n\t          'uint8clamped': Uint8ClampedArray,\n\t          'int32': Int32Array,\n\t          'int16': Int16Array,\n\t          'int8': Int8Array,\n\t          'float32': Float32Array,\n\t          'float64': Float64Array\n\t        };\n\t        if (!types[dataType]) {\n\t          return buffer;\n\t        }\n\t        return new types[dataType](buffer);\n\t      }\n\t\n\t      function prepareTransferBuffers(hamsterFood) {\n\t        var buffers = [];\n\t        var key = null;\n\t        for (key in hamsterFood) {\n\t          if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n\t            if (hamsterFood[key].buffer) {\n\t              buffers.push(hamsterFood[key].buffer);\n\t            } else if (Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n\t              buffers.push(new ArrayBuffer(hamsterFood[key]));\n\t            }\n\t          }\n\t        }\n\t        return buffers;\n\t      }\n\t\n\t      addEventListener('message', function (incomingMessage) {\n\t        params = incomingMessage.data;\n\t        rtn = {\n\t          data: [],\n\t          dataType: params.dataType ? params.dataType.toLowerCase() : null,\n\t          threadStart: Date.now()\n\t        };\n\t        if (params.importScripts) {\n\t          self.importScripts(params.importScripts);\n\t        }\n\t        new Function(params.hamstersJob)();\n\t        rtn.threadEnd = Date.now();\n\t        postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @function legacyScaffold - Provides library functionality for legacy devices\n\t    */\n\t\n\t  }, {\n\t    key: 'legacyScaffold',\n\t    value: function legacyScaffold(params, resolve) {\n\t      var _this = this;\n\t\n\t      setTimeout(function () {\n\t        // Node.js doesn't support self for some reason, so let's use global instead\n\t        // this works great for node, not so great for reactNative\n\t        // IOS has a secury check within React Native preventing global variable assignment\n\t        // Android does not have the same security restriction\n\t        if (typeof self === 'undefined') {\n\t          var self = global || window || _this;\n\t        }\n\t\n\t        self.params = params;\n\t        self.rtn = {\n\t          data: [],\n\t          threadStart: Date.now()\n\t        };\n\t        params.hamstersJob();\n\t        rtn.threadEnd = Date.now();\n\t        resolve(rtn);\n\t      }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n\t    }\n\t  }]);\n\t\n\t  return wheel;\n\t}();\n\t\n\t;\n\t\n\tvar hamstersWheel = new wheel();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersWheel;\n\t}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar memoizer = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function memoizer() {\n\t    _classCallCheck(this, memoizer);\n\t\n\t    this.maxCacheEntries = 25;\n\t    this.cacheEntries = [];\n\t    this.itemCached = this.isItemCached;\n\t    this.fetchItem = this.fetchItemFromCache;\n\t    this.saveItem = this.saveItemToCache;\n\t  }\n\t\n\t  /**\n\t  * @function isItemCached - Checks for existing data in cache\n\t  * @param {object} input - Provided library execution options\n\t  * @param {method} functionToRun - Function to execute\n\t  * @return {object} Execution results from cache, or false\n\t  */\n\t\n\t\n\t  _createClass(memoizer, [{\n\t    key: 'isItemCached',\n\t    value: function isItemCached(input, method) {\n\t      return !!this.fetchItem({ fn: method, data: input }) || false;\n\t    }\n\t\n\t    /**\n\t    * @function fetchItemFromCache - Fetches cache item from cache\n\t    * @param {object} cacheItem - Cache item to fetch\n\t    * @return {object} CacheResults, or false\n\t    */\n\t\n\t  }, {\n\t    key: 'fetchItemFromCache',\n\t    value: function fetchItemFromCache(cacheItem) {\n\t      var cachedResult = null;\n\t      for (var key in this.cache) {\n\t        if (this.cache.hasOwnProperty(key)) {\n\t          if (cacheItem[key].fn === cacheItem.fn) {\n\t            if (cacheItem[key].input === cacheItem.data) {\n\t              cachedResult = cacheItem[key].input;\n\t            }\n\t          }\n\t        }\n\t      }\n\t      return cachedResult || false;\n\t    }\n\t\n\t    /**\n\t    * @function isItemCached - Checks for existing data in cache\n\t    * @param {method} functionToRun - Function to execute\n\t    * @param {object} data - Execution results to cache\n\t    */\n\t\n\t  }, {\n\t    key: 'saveItemToCache',\n\t    value: function saveItemToCache(method, data, maxCacheEntries) {\n\t      var itemToCache = {\n\t        fn: method,\n\t        input: data\n\t      };\n\t      var cachedItems = this.cacheEntries;\n\t      if (cachedItems.length < maxCacheEntries) {\n\t        cachedItems.push(itemToCache);\n\t      } else {\n\t        cachedItems.splice(0, 0, itemToCache);\n\t      }\n\t      this.cacheEntries = cachedItems;\n\t    }\n\t  }]);\n\t\n\t  return memoizer;\n\t}();\n\t\n\tvar hamstersMemoizer = new memoizer();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersMemoizer;\n\t}\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\tvar _data = __webpack_require__(1);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _habitat = __webpack_require__(2);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _wheel = __webpack_require__(5);\n\t\n\tvar _wheel2 = _interopRequireDefault(_wheel);\n\t\n\tvar _logger = __webpack_require__(3);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t'use strict';\n\t\n\tvar pool = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function pool() {\n\t    _classCallCheck(this, pool);\n\t\n\t    this.tasks = [];\n\t    this.threads = [];\n\t    this.running = [];\n\t    this.pending = [];\n\t    this.fetchHamster = this.grabHamster;\n\t    this.selectHamsterWheel = this.selectHamsterWheel;\n\t  }\n\t\n\t  /**\n\t  * @function grabHamster - Adds task to queue waiting for available thread\n\t  * @param {object} array - Provided data to execute logic on\n\t  * @param {object} task - Provided library functionality options for this task\n\t  * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t  * @param {function} wheel - Results from select hamster wheel\n\t  * @param {function} resolve - onSuccess method\n\t  * @param {function} reject - onError method\n\t  */\n\t\n\t\n\t  _createClass(pool, [{\n\t    key: 'addWorkToPending',\n\t    value: function addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n\t      this.pending.push(arguments);\n\t    }\n\t\n\t    /**\n\t    * @function grabHamster - Invokes processing of next item in queue\n\t    * @param {object} item - Task to process\n\t    */\n\t\n\t  }, {\n\t    key: 'processQueue',\n\t    value: function processQueue(item) {\n\t      return this.runTask(item[0], item[1], item[2], item[3], item[4], item[5]);\n\t    }\n\t\n\t    /**\n\t    * @function grabHamster - Keeps track of threads running, scoped globally and to task\n\t    * @param {number} threadId - Id of thread\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    */\n\t\n\t  }, {\n\t    key: 'grabHamster',\n\t    value: function grabHamster(threadId, persistence, wheel) {\n\t      if (persistence) {\n\t        return this.threads[threadId];\n\t      }\n\t      return this.spawnHamster(_habitat2.default, wheel, _data2.default.workerURI);\n\t    }\n\t\n\t    /**\n\t    * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {number} id - Id of thread to track\n\t    */\n\t\n\t  }, {\n\t    key: 'keepTrackOfThread',\n\t    value: function keepTrackOfThread(task, id) {\n\t      task.workers.push(id); //Keep track of threads poold to current task\n\t      this.running.push(id); //Keep track of all currently running threads\n\t    }\n\t\n\t    /**\n\t    * @function registerTask - Adds task to execution pool based on id\n\t    * @param {number} id - Id of task to register\n\t    */\n\t\n\t  }, {\n\t    key: 'registerTask',\n\t    value: function registerTask(id) {\n\t      var index = this.tasks.push(id);\n\t      return this.tasks[index - 1];\n\t    }\n\t\n\t    /**\n\t    * @function spawnHamsters - Spawns multiple new threads for execution\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {number} maxThreds - Max number of threads for this client\n\t    */\n\t\n\t  }, {\n\t    key: 'spawnHamsters',\n\t    value: function spawnHamsters(persistence, wheel, maxThreads) {\n\t      var workerURI = null;\n\t      if (_habitat2.default.legacy) {\n\t        return;\n\t      }\n\t      console.log(_habitat2.default);\n\t      if (_habitat2.default.browser && !_habitat2.default.reactNative) {\n\t        workerURI = _data2.default.generateBlob(wheel);\n\t      }\n\t      if (persistence) {\n\t        _logger2.default.info(maxThreads + ' Logical Threads Detected, Spawning ' + maxThreads + ' Hamsters');\n\t        for (maxThreads; maxThreads > 0; maxThreads--) {\n\t          this.threads.push(this.spawnHamster(wheel, workerURI));\n\t        }\n\t        _logger2.default.info(this.threads.length + ' hamsters ready and awaiting instructions');\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function spawnHamster - Spawns a new thread for execution\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {string} workerURI - URI for created library blob object \n\t    */\n\t\n\t  }, {\n\t    key: 'spawnHamster',\n\t    value: function spawnHamster(wheel, workerURI) {\n\t      if (_habitat2.default.reactNative) {\n\t        return new _habitat2.default.Worker('./common/rnHamstersWheel.js');\n\t      }\n\t      if (_habitat2.default.ie10) {\n\t        return new _habitat2.default.Worker('./common/hamstersWheel.js');\n\t      }\n\t      if (_habitat2.default.node) {\n\t        return new _habitat2.default.Worker(wheel);\n\t      }\n\t      if (_habitat2.default.webWorker) {\n\t        return new _habitat2.default.SharedWorker(workerURI, 'SharedHamsterWheel');\n\t      }\n\t      return new _habitat2.default.Worker(workerURI);\n\t    }\n\t\n\t    /**\n\t    * @function prepareMeal - Prepares message to send to a thread and invoke execution\n\t    * @param {object} threadArray - Provided data to execute logic on\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @return {object} hamsterFood - Prepared message to send to a thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareMeal',\n\t    value: function prepareMeal(threadArray, task) {\n\t      var hamsterFood = {\n\t        array: threadArray\n\t      };\n\t      for (var key in task.input) {\n\t        if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) == -1) {\n\t          hamsterFood[key] = task.input[key];\n\t        }\n\t      }\n\t      return hamsterFood;\n\t    }\n\t\n\t    /**\n\t    * @function hamsterWheel - Runs function using thread\n\t    * @param {object} array - Provided data to execute logic on\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'runTask',\n\t    value: function runTask(array, task, persistence, wheel, resolve, reject) {\n\t      var threadId = this.running.length;\n\t      var hamsterFood = this.prepareMeal(array, task);\n\t      this.registerTask(task.id);\n\t      this.keepTrackOfThread(task, threadId);\n\t      if (_habitat2.default.legacy) {\n\t        wheel(hamsterFood, resolve, reject);\n\t      } else {\n\t        var hamster = this.grabHamster(threadId, persistence, wheel);\n\t        this.trainHamster(threadId, task, hamster, persistence, resolve, reject);\n\t        _data2.default.feedHamster(hamster, hamsterFood);\n\t      }\n\t      task.count += 1; //Increment count, thread is running\n\t    }\n\t\n\t    /**\n\t    * @function hamsterWheel - Runs or queues function using threads\n\t    * @param {object} array - Provided library functionality options for this task\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'hamsterWheel',\n\t    value: function hamsterWheel(array, task, persistence, maxThreads, wheel, resolve, reject) {\n\t      if (maxThreads === this.running.length) {\n\t        return this.addWorkToPending(array, task, persistence, wheel, resolve, reject);\n\t      }\n\t      return this.runTask(array, task, persistence, wheel, resolve, reject);\n\t    }\n\t\n\t    /**\n\t    * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {function} resolve - onSuccess method\n\t    */\n\t\n\t  }, {\n\t    key: 'returnOutputAndRemoveTask',\n\t    value: function returnOutputAndRemoveTask(task, resolve) {\n\t      var output = _data2.default.getOutput(task, _habitat2.default.transferrable);\n\t      if (task.sort) {\n\t        output = _data2.default.sortOutput(output, task.sort);\n\t      }\n\t      this.tasks[task.id] = null; //Clean up our task, not needed any longer\n\t      resolve({\n\t        data: output\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @function trainHamster - Trains thread in how to behave\n\t    * @param {number} threadId - Internal use id for this thread\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {worker} hamster - Thread to train\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'trainHamster',\n\t    value: function trainHamster(threadId, task, hamster, persistence, resolve, reject) {\n\t      var pool = this;\n\t      // Handle successful response from a thread\n\t      function onThreadResponse(message) {\n\t        var results = message.data;\n\t        pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n\t        task.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n\t        // String only communcation for rn...in 2k18\n\t        if (_habitat2.default.reactNative) {\n\t          task.output[threadId] = JSON.parse(results.data);\n\t        } else {\n\t          task.output[threadId] = results.data;\n\t        }\n\t        if (task.workers.length === 0 && task.count === task.threads) {\n\t          pool.returnOutputAndRemoveTask(task, resolve);\n\t        }\n\t        if (pool.pending.length !== 0) {\n\t          pool.processQueue(pool.pending.shift());\n\t        }\n\t        if (!persistence && !_habitat2.default.webWorker) {\n\t          hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n\t        }\n\t      }\n\t      // Handle error response from a thread\n\t      function onThreadError(error) {\n\t        _logger2.default.errorFromThread(error, reject);\n\t      }\n\t      // Register on message/error handlers\n\t      if (_habitat2.default.webWorker) {\n\t        hamster.port.onmessage = onThreadResponse;\n\t        hamster.port.onerror = onThreadError;\n\t      } else {\n\t        hamster.onmessage = onThreadResponse;\n\t        hamster.onerror = onThreadError;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n\t    */\n\t\n\t  }, {\n\t    key: 'selectHamsterWheel',\n\t    value: function selectHamsterWheel() {\n\t      if (_habitat2.default.legacy) {\n\t        return _wheel2.default.legacy;\n\t      }\n\t      if (_habitat2.default.webWorker) {\n\t        return _wheel2.default.worker;\n\t      }\n\t      return _wheel2.default.regular;\n\t    }\n\t\n\t    /**\n\t    * @function scheduleTask - Adds new task to the system for execution\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Scaffold to execute login within\n\t    * @param {number} maxThreads - Maximum number of threads for this client\n\t    */\n\t\n\t  }, {\n\t    key: 'scheduleTask',\n\t    value: function scheduleTask(task, persistence, wheel, maxThreads) {\n\t      var _this = this;\n\t\n\t      var threadArrays = [];\n\t      if (task.input.array && task.threads !== 1) {\n\t        threadArrays = _data2.default.splitArrays(task.input.array, task.threads); //Divide our array into equal array sizes\n\t      }\n\t      return new Promise(function (resolve, reject) {\n\t        var i = 0;\n\t        while (i < task.threads) {\n\t          if (threadArrays && task.threads !== 1) {\n\t            _this.hamsterWheel(threadArrays[i], task, persistence, maxThreads, wheel, resolve, reject);\n\t          } else {\n\t            _this.hamsterWheel(task.input.array, task, persistence, maxThreads, wheel, resolve, reject);\n\t          }\n\t          i += 1;\n\t        }\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return pool;\n\t}();\n\t\n\tvar hamsterPool = new pool();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamsterPool;\n\t}\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\tvar _version = __webpack_require__(4);\n\t\n\tvar _version2 = _interopRequireDefault(_version);\n\t\n\tvar _habitat = __webpack_require__(2);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _pool = __webpack_require__(7);\n\t\n\tvar _pool2 = _interopRequireDefault(_pool);\n\t\n\tvar _data = __webpack_require__(1);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _wheel = __webpack_require__(5);\n\t\n\tvar _wheel2 = _interopRequireDefault(_wheel);\n\t\n\tvar _logger = __webpack_require__(3);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tvar _memoizer = __webpack_require__(6);\n\t\n\tvar _memoizer2 = _interopRequireDefault(_memoizer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t'use strict';\n\t\n\tvar hamstersjs = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function hamstersjs() {\n\t    _classCallCheck(this, hamstersjs);\n\t\n\t    this.version = _version2.default;\n\t    this.maxThreads = _habitat2.default.logicalThreads;\n\t    this.habitat = _habitat2.default;\n\t    this.data = _data2.default;\n\t    this.pool = _pool2.default;\n\t    this.logger = _logger2.default;\n\t    this.memoizer = _memoizer2.default;\n\t    this.run = this.hamstersRun;\n\t    this.promise = this.hamstersPromise;\n\t    this.init = this.initializeLibrary;\n\t  }\n\t\n\t  /**\n\t  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n\t  * @param {object} startOptions - Provided library functionality options\n\t  */\n\t\n\t\n\t  _createClass(hamstersjs, [{\n\t    key: 'initializeLibrary',\n\t    value: function initializeLibrary(startOptions) {\n\t      this.logger.info('Preparing the hamster wheels & readying hamsters');\n\t      if (typeof startOptions !== 'undefined') {\n\t        this.processStartOptions(startOptions);\n\t      }\n\t      _pool2.default.spawnHamsters(_habitat2.default.persistence, _pool2.default.selectHamsterWheel(), this.maxThreads);\n\t      delete this.init;\n\t    }\n\t\n\t    /**\n\t    * @function processStartOptions - Adjusts library functionality based on provided options\n\t    * @param {object} startOptions - Provided library functionality options\n\t    */\n\t\n\t  }, {\n\t    key: 'processStartOptions',\n\t    value: function processStartOptions(startOptions) {\n\t      // Add options to override library environment behavior\n\t      var habitatKeys = ['worker', 'sharedworker', 'legacy', 'webworker', 'reactnative', 'atomics', 'proxies', 'transferrable', 'browser', 'shell', 'node', 'debug', 'persistence', 'importscripts'];\n\t      for (var key in startOptions) {\n\t        if (startOptions.hasOwnProperty(key)) {\n\t          if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n\t            this.habitat[key] = startOptions[key];\n\t          } else {\n\t            this[key] = startOptions[key];\n\t          }\n\t        }\n\t      }\n\t      // Ensure legacy mode is disabled when we pass a third party worker library\n\t      if (typeof this.habitat.Worker === 'function') {\n\t        this.habitat.legacy = false;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @constructor\n\t    * @function hamstersTask - Constructs a new task object from provided arguments\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @param {object} scope - Reference to main library context\n\t    * @return {object} new Hamsters.js task\n\t    */\n\t\n\t  }, {\n\t    key: 'hamstersTask',\n\t    value: function hamstersTask(params, functionToRun, scope) {\n\t      this.id = scope.pool.tasks.length;\n\t      this.count = 0;\n\t      this.aggregate = params.aggregate || false;\n\t      this.output = [];\n\t      this.workers = [];\n\t      this.memoize = params.memoize || false;\n\t      this.dataType = params.dataType ? params.dataType.toLowerCase() : null;\n\t      this.input = params;\n\t      // Do not modify function if we're running on the main thread for legacy fallback\n\t      if (_habitat2.default.legacy) {\n\t        this.threads = 1;\n\t        this.input.hamstersJob = functionToRun;\n\t      } else {\n\t        this.threads = params.threads || 1;\n\t        this.input.hamstersJob = scope.data.prepareJob(functionToRun);\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @async\n\t    * @function hamstersPromise - Calls library functionality using async promises\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @return {array} Results from functionToRun.\n\t    */\n\t\n\t  }, {\n\t    key: 'hamstersPromise',\n\t    value: function hamstersPromise(params, functionToRun) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var task = new _this.hamstersTask(params, functionToRun, _this);\n\t        _this.pool.scheduleTask(task, _this.habitat.persistence, scaffold, _this.maxThreads).then(function (results) {\n\t          resolve(results);\n\t        }).catch(function (error) {\n\t          _logger2.default.error(error.messsage, reject);\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @async\n\t    * @function hamstersRun - Calls library functionality using async callbacks\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @param {function} onSuccess - Function to call upon successful execution\n\t    * @param {function} onError - Function to call upon execution failure\n\t    * @return {array} Results from functionToRun.\n\t    */\n\t\n\t  }, {\n\t    key: 'hamstersRun',\n\t    value: function hamstersRun(params, functionToRun, onSuccess, onError) {\n\t      var task = new this.hamstersTask(params, functionToRun, this);\n\t      var scaffold = _pool2.default.selectHamsterWheel();\n\t      this.pool.scheduleTask(task, this.habitat.persistence, scaffold, this.maxThreads).then(function (results) {\n\t        onSuccess(results);\n\t      }).catch(function (error) {\n\t        _logger2.default.error(error.messsage, onError);\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return hamstersjs;\n\t}();\n\t\n\tvar hamsters = new hamstersjs();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamsters;\n\t}\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// hamsters.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap db9b7d2b6c8f99a07d9a","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\n'use strict';\n\nclass data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.randomArray = this.randomArray;\n    this.aggregateArrays = this.aggregateThreadOutputs;\n    this.splitArrays = this.splitArrayIntoSubArrays;\n    this.createBlob = this.createDataBlob;\n    this.generateBlob = this.generateWorkerBlob;\n    this.processDataType = this.processDataType;\n    this.sortOutput = this.sortArray;\n    this.getOutput = this.prepareOutput;\n    this.prepareJob = this.prepareFunction;\n    this.feedHamster = this.messageWorker;\n    this.prepareMeal = this.prepareHamsterFood;\n    this.workerURI = null;\n  }\n\n  /**\n  * @function prepareHamsterFood - Prepares message to send to thread(s)\n  * @param {object} task - Task to process\n  */\n  prepareHamsterFood(task) {\n    let hamsterFood = task.input;\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && key !== 'array') {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    hamsterFood.array = task.input.array;\n    if (task.hamstersJob && !hamsterFood.hamstersJob) {\n      hamsterFood.hamstersJob = hamstersJob;\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function messageWorker - Prepares message to send to thread\n  * @param {worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorker(hamster, hamsterFood) {\n    if(hamstersHabitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (hamstersHabitat.ie10) {\n      return hamster.postMessage(hamsterFood);\n    }\n    if (hamstersHabitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood));\n  }\n\n  /**\n  * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n  * @param {object} hamsterFood - Message to send to thread\n  */\n  prepareTransferBuffers(hamsterFood) {\n    let buffers = [];\n    let key = null;\n    if(hamstersHabitat.transferrable) {\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n    }\n    return buffers;\n  }\n\n  /**\n  * @function prepareFunction - Prepares transferrable buffers for faster message passing\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareFunction(functionBody) {\n    if (!hamstersHabitat.legacy) {\n      functionBody = String(functionBody);\n      if (!hamstersHabitat.webWorker) {\n        let startingIndex = (functionBody.indexOf(\"{\") + 1);\n        let endingIndex = (functionBody.length - 1);\n        return functionBody.substring(startingIndex, endingIndex);\n      }\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    let functionString = '(' + String(workerLogic) + ')();';\n    let hamsterBlob = this.createBlob(functionString);\n    return URL.createObjectURL(hamsterBlob);\n  }\n\n  /**\n  * @function processDataType - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  processDataType(dataType, buffer) {\n    if(hamstersHabitat.transferrable) {\n      return this.typedArrayFromBuffer(dataType, buffer);\n    }\n    return buffer;\n  }\n\n  /**\n  * @function prepareOutput - Prepares final task output\n  * @param {task} buffer - Task to prepare output for\n  */\n  prepareOutput(task) {\n    if(task.aggregate && task.threads !== 1) {\n      return this.aggregateThreadOutputs(task.output, task.dataType);\n    }\n    return task.output;\n  }\n\n  /**\n  * @function sortArray - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortArray(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  }\n\n\n  /**\n  * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n  */\n  locateBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return hamstersLogger.error('Environment does not support data blobs!');\n  }\n\n  /**\n  * @function createDataBlob - Creates new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function randomArray - Creates new random array\n  * @param {number} count - Number of random elements in array\n  * @param {function} onSuccess - onSuccess callback\n  */\n  randomArray(count, onSuccess) {\n    var randomArray = [];\n    while(count > 0) {\n      randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n      count -= 1;\n    }\n    onSuccess(randomArray);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType || !hamstersHabitat.transferrable) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n  * @param {array} array - Array to split\n  * @param {number} n - Number of subarrays to create\n  */\n  splitArrayIntoSubArrays(array, n) {\n    let i = 0;\n    let threadArrays = [];\n    let size = Math.ceil(array.length/n);\n    if(array.slice) {\n      while(i < array.length) {\n        threadArrays.push(array.slice(i, i += size));\n      }\n    } else {\n      while (i < array.length) {\n        threadArrays.push(array.subarray(i, i += size));\n      }\n    }\n    return threadArrays;\n  }\n}\n\nvar hamstersData = new data();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersData;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/data.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\n\n'use strict';\n\nclass habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.debug = false;\n    this.importScripts = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.legacy = this.isLegacyEnvironment() || false;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferrable = this.supportsTransferrableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer;\n    this.logicalThreads = this.determineGlobalThreads();\n    this.Worker = this.locateWorkerObject();\n    this.sharedWorker = this.locateSharedWorkerObject();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(typeof navigator !== 'undefined') {\n      if(typeof navigator.hardwareConcurrency !== 'undefined') {\n        max = navigator.hardwareConcurrency;\n      }\n      if(max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n        max = 20;\n      }\n    }\n    if(this.isNode() && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return typeof Worker !== 'undefined' ? Worker : null;\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return typeof SharedWorker !== 'undefined' ? SharedWorker : null;\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return typeof window === \"object\";\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer(version) {\n    return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return typeof process === \"object\" && typeof require === \"function\" && !this.isBrowser() && !this.isWebWorker();\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a webworker\n  */\n  isWebWorker() {\n    return typeof importScripts === \"function\";\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is reactNative\n  */\n  isReactNative() {\n    return !this.isNode() && typeof global === 'object';\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return this.isBrowser() && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    // Force legacy mode for known devices that don't support threading\n    if (this.isBrowser() && !this.isReactNative()) {\n      let isIE10 = this.isInternetExplorer(10);\n      let userAgent = navigator.userAgent;\n      let lacksWorkerSupport = (typeof this.Worker === 'undefined');\n      let legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n      if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1 || isIE10) {\n        this.legacy = true;\n      }\n    }\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      try {\n        let workerBlob = hamstersData.generateBlob();\n        let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      } catch (e) {\n        this.legacy = true;\n      }\n    }\n    // Final check, if we're in a shell environment or we have no worker object use legacy mode\n    if(!this.legacy) {\n      return this.isShell() || !this.locateWorkerObject();\n    }\n  }\n\n  /**\n  * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferrableObjects() {\n    return typeof Uint8Array !== 'undefined';\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n  */\n  supportsAtomicOperations() {\n    return typeof SharedArrayBuffer !== 'undefined';\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports proxy objects\n  */\n  supportsProxies() {\n    return typeof Proxy !== 'undefined';\n  }\n}\n\nvar hamstersHabitat = new habitat();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersHabitat;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/habitat.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersVersion from './version';\n\n'use strict';\n\nclass logger {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.logBook = {\n      error: [], \n      warning: [], \n      info: []\n    };\n    this.info = this.infoLog;\n    this.warning = this.warningLog;\n    this.error = this.errorLog;\n    this.errorFromThread = this.errorFromThread;\n    this.saveLogEntry = this.saveToLogBook;\n    this.getLogEntries = this.fetchLogBook;\n    this.searchLogEntries = this.searchLogBook;\n  }\n\n  infoLog(message) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Info: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('info', timeStampedMessage);\n    console.info(timeStampedMessage);\n  }\n\n  warningLog(message) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Warning: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('warning', timeStampedMessage);\n    console.warn(timeStampedMessage);\n  }\n\n  errorLog(message, reject) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Error: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('error', timeStampedMessage);\n    console.error(timeStampedMessage);\n    if(reject) {\n      reject(timeStampedMessage);\n    } else {\n      return timeStampedMessage;\n    }\n  }\n\n  errorFromThread(error, reject) {\n    let errorMessage = `#${error.lineno} in ${error.filename}: ${error.message}`;\n    this.errorLog(errorMessage, reject);\n  }\n\n  saveToLogBook(eventType, message) {\n    this.logBook[eventType].push(message);\n  }\n\n  fetchLogBook(eventType) {\n    if(eventType) {\n      return this.logBook[eventType];\n    }\n    return this.logBook;\n  }\n\n  findStringInLogBook(logBookEntries, string) {\n    let searchResults = [];\n    let i = 0;\n    for (i; i < logBookEntries.length; i++) {\n      if(logBookEntries[i].indexOf(string) !== -1) {\n        searchResults.push(logBookEntries[i]);\n      }\n    }\n    return searchResults;\n  }\n\n  findStringInLogBookAllTypes(logBook, searchString) {\n    let searchResults = [];\n    let key, eventTypeResults, tmpEntries = null;\n    for(key in logBook) {\n      if(logBook.hasOwnProperty(key)) {\n        tmpEntries = logBook[key];\n        eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n      }\n    }\n    return searchResults;\n  }\n\n  searchLogBook(searchString, eventType) {\n    let finalResults = [];\n    if(eventType) {\n      finalResults = this.findStringInLogBook(this.logBook[eventType], string);\n    } else {\n      finalResults = this.findStringInLogBookAllTypes(this.logBook);\n    }\n    return {\n      total: finalResults.length,\n      results: finalResults\n    };\n  }   \n}\n\nvar hamstersLogger = new logger();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersLogger;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/logger.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/*\n* Title: Hamsters.js\n* Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers\n* Author: Austin K. Smith\n* Contact: austin@asmithdev.com\n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com\n* License: Artistic License 2.0\n*/\n\n'use strict';\n\nconst majorVersion = 5;\nconst minorVersion = 1;\nconst patchVersion = 1;\nconst hamstersVersion = `${majorVersion}.${minorVersion}.${patchVersion}`;\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersVersion;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/version.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\n\n'use strict';\n\nclass wheel {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.worker = this.workerScaffold;\n    this.regular = this.regularScaffold;\n    this.legacy = this.legacyScaffold;\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n  */\n  workerScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    addEventListener('connect', (incomingConnection) => {\n      const port = incomingConnection.ports[0];\n      port.start();\n      port.addEventListener('message', (incomingMessage) => {\n        params = incomingMessage.data;\n        rtn = {\n          data: [],\n          dataType: params.dataType,\n          threadStart: Date.now()\n        };\n        if(params.importScripts) {\n          self.importScripts(params.importScripts);\n        }\n        eval(\"(\" + params.hamstersJob + \")\")();\n        rtn.threadEnd = Date.now();\n        port.postMessage(rtn);\n      }, false);\n    }, false);\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality\n  */\n  regularScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      let self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    function prepareReturn(returnObject) {\n      let dataType = returnObject.dataType;\n      if(dataType) {\n        returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n      }\n      return returnObject;\n    }\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      const types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n\n    function prepareTransferBuffers(hamsterFood) {\n      let buffers = [];\n      let key = null;\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n      return buffers;\n    }\n\n    addEventListener('message', (incomingMessage) => {\n      params = incomingMessage.data;\n      rtn = {\n        data: [],\n        dataType: (params.dataType ? params.dataType.toLowerCase() : null),\n        threadStart: Date.now()\n      };\n      if(params.importScripts) {\n        self.importScripts(params.importScripts);\n      }\n      new Function(params.hamstersJob)();\n      rtn.threadEnd = Date.now();\n      postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n    });\n  }\n\n  /**\n  * @function legacyScaffold - Provides library functionality for legacy devices\n  */\n  legacyScaffold(params, resolve) {\n    setTimeout(() => {\n      // Node.js doesn't support self for some reason, so let's use global instead\n      // this works great for node, not so great for reactNative\n      // IOS has a secury check within React Native preventing global variable assignment\n      // Android does not have the same security restriction\n      if(typeof self === 'undefined') {\n        var self = (global || window || this);\n      }\n\n      self.params = params;\n      self.rtn = {\n        data: [],\n        threadStart: Date.now()\n      };\n      params.hamstersJob();\n      rtn.threadEnd = Date.now();\n      resolve(rtn);\n    }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n  }\n};\n\nvar hamstersWheel = new wheel();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersWheel;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/wheel.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass memoizer {\n  \n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.maxCacheEntries = 25;\n    this.cacheEntries = [];\n    this.itemCached = this.isItemCached;\n    this.fetchItem = this.fetchItemFromCache;\n    this.saveItem = this.saveItemToCache;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {object} input - Provided library execution options\n  * @param {method} functionToRun - Function to execute\n  * @return {object} Execution results from cache, or false\n  */\n  isItemCached(input, method) {\n  \treturn !!(this.fetchItem({fn: method, data: input})) || false;\n  }\n\n  /**\n  * @function fetchItemFromCache - Fetches cache item from cache\n  * @param {object} cacheItem - Cache item to fetch\n  * @return {object} CacheResults, or false\n  */\n  fetchItemFromCache(cacheItem) {\n  \tlet cachedResult = null;\n  \tfor(var key in this.cache) {\n  \t\tif(this.cache.hasOwnProperty(key)) {\n  \t\t\tif(cacheItem[key].fn === cacheItem.fn) {\n  \t\t\t\tif(cacheItem[key].input === cacheItem.data) {\n  \t\t\t\t\tcachedResult = cacheItem[key].input;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  \treturn cachedResult || false;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {method} functionToRun - Function to execute\n  * @param {object} data - Execution results to cache\n  */\n  saveItemToCache(method, data, maxCacheEntries) {\n  \tlet itemToCache = {\n  \t\tfn: method,\n  \t\tinput: data\n  \t};\n  \tlet cachedItems = this.cacheEntries;\n  \tif(cachedItems.length < maxCacheEntries) {\n  \t\tcachedItems.push(itemToCache);\n  \t} else {\n  \t\tcachedItems.splice(0, 0, itemToCache); \n  \t}\n  \tthis.cacheEntries = cachedItems;\n  }\n}\n\nvar hamstersMemoizer = new memoizer();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersMemoizer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/memoizer.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\nimport hamstersWheel from './wheel';\nimport hamstersLogger from './logger';\n\n'use strict';\n\nclass pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.tasks = [];\n\t  this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.grabHamster;\n    this.selectHamsterWheel = this.selectHamsterWheel;\n  }\n\n  /**\n  * @function grabHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n  \tthis.pending.push(arguments);\n  }\n\n  /**\n  * @function grabHamster - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueue(item) {\n  \treturn this.runTask(item[0], item[1], item[2], item[3], item[4], item[5]);\n  }\n\n  /**\n  * @function grabHamster - Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  grabHamster(threadId, persistence, wheel) {\n    if(persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster(hamstersHabitat, wheel, hamstersData.workerURI);\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    task.workers.push(id); //Keep track of threads poold to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function registerTask - Adds task to execution pool based on id\n  * @param {number} id - Id of task to register\n  */\n  registerTask(id) {\n    let index = this.tasks.push(id);\n    return this.tasks[(index - 1)];\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(persistence, wheel, maxThreads) {\n  \tlet workerURI = null;\n    if(hamstersHabitat.legacy) {\n      return;\n    }\n    console.log(hamstersHabitat);\n    if(hamstersHabitat.browser && !hamstersHabitat.reactNative) {\n      workerURI = hamstersData.generateBlob(wheel);\n    }\n    if (persistence) {\n      hamstersLogger.info(`${maxThreads} Logical Threads Detected, Spawning ${maxThreads} Hamsters`);\n      for (maxThreads; maxThreads > 0; maxThreads--) {\n        this.threads.push(this.spawnHamster(wheel, workerURI));\n      }\n      hamstersLogger.info(`${this.threads.length} hamsters ready and awaiting instructions`);\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {string} workerURI - URI for created library blob object \n  */\n  spawnHamster(wheel, workerURI) {\n    if(hamstersHabitat.reactNative) {\n      return new hamstersHabitat.Worker('./common/rnHamstersWheel.js');\n    }\n    if(hamstersHabitat.ie10) {\n      return new hamstersHabitat.Worker('./common/hamstersWheel.js');\n    }\n    if (hamstersHabitat.node) {\n      return new hamstersHabitat.Worker(wheel);\n    }\n    if (hamstersHabitat.webWorker) {\n      return new hamstersHabitat.SharedWorker(workerURI, 'SharedHamsterWheel');\n    }\n    return new hamstersHabitat.Worker(workerURI);\n  }\n\n  /**\n  * @function prepareMeal - Prepares message to send to a thread and invoke execution\n  * @param {object} threadArray - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @return {object} hamsterFood - Prepared message to send to a thread\n  */\n  prepareMeal(threadArray, task) {\n    let hamsterFood = {\n    \tarray: threadArray\n    };\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) == -1) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(array, task, persistence, wheel, resolve, reject) {\n  \tlet threadId = this.running.length;\n    let hamsterFood = this.prepareMeal(array, task);\n    this.registerTask(task.id);\n    this.keepTrackOfThread(task, threadId);\n    if(hamstersHabitat.legacy) {\n      wheel(hamsterFood, resolve, reject);\n    } else {\n      let hamster = this.grabHamster(threadId, persistence, wheel);\n      this.trainHamster(threadId, task, hamster, persistence, resolve, reject);\n      hamstersData.feedHamster(hamster, hamsterFood);\n    }\n    task.count += 1; //Increment count, thread is running\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(array, task, persistence, maxThreads, wheel, resolve, reject) {\n    if(maxThreads === this.running.length) {\n      return this.addWorkToPending(array, task, persistence, wheel, resolve, reject);\n    }\n    return this.runTask(array, task, persistence, wheel, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    let output = hamstersData.getOutput(task, hamstersHabitat.transferrable);\n    if (task.sort) {\n      output = hamstersData.sortOutput(output, task.sort);\n    }\n    this.tasks[task.id] = null; //Clean up our task, not needed any longer\n    resolve({\n      data: output\n    });\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(threadId, task, hamster, persistence, resolve, reject) {\n    let pool = this;\n    // Handle successful response from a thread\n    function onThreadResponse(message) {\n      let results = message.data;\n      pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n    \ttask.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n      // String only communcation for rn...in 2k18\n      if(hamstersHabitat.reactNative) {\n        task.output[threadId] = JSON.parse(results.data);\n      } else {\n        task.output[threadId] = results.data;\n      }\n      if (task.workers.length === 0 && task.count === task.threads) {\n        pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (pool.pending.length !== 0) {\n        pool.processQueue(pool.pending.shift());\n      }\n      if (!persistence && !hamstersHabitat.webWorker) {\n        hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    }\n    // Handle error response from a thread\n    function onThreadError(error) {\n      hamstersLogger.errorFromThread(error, reject);\n    }\n    // Register on message/error handlers\n    if (hamstersHabitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onerror = onThreadError;\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onerror = onThreadError;\n    }\n  }\n\n  /**\n  * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if (hamstersHabitat.legacy) {\n      return hamstersWheel.legacy;\n    }\n    if(hamstersHabitat.webWorker) {\n      return hamstersWheel.worker;\n    }\n    return hamstersWheel.regular;\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, persistence, wheel, maxThreads) {\n    let threadArrays = [];\n\t  if(task.input.array && task.threads !== 1) {\n\t    threadArrays = hamstersData.splitArrays(task.input.array, task.threads); //Divide our array into equal array sizes\n\t  }\n  \treturn new Promise((resolve, reject) => {\n      let i = 0;\n      while (i < task.threads) {\n      \tif(threadArrays && task.threads !== 1) {\n        \tthis.hamsterWheel(threadArrays[i], task, persistence, maxThreads, wheel, resolve, reject);\n\t\t    } else {\n        \tthis.hamsterWheel(task.input.array, task, persistence, maxThreads, wheel, resolve, reject);\n\t\t    }\n        i += 1;\n      }\n    });\n  }\n}\n\nvar hamsterPool = new pool();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsterPool;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/pool.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersVersion from './core/version';\nimport hamstersHabitat from './core/habitat';\nimport hamstersPool from './core/pool';\nimport hamstersData from './core/data';\nimport hamstersWheel from './core/wheel';\nimport hamstersLogger from './core/logger';\nimport hamstersMemoizer from './core/memoizer';\n\n'use strict';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = hamstersVersion;\n    this.maxThreads = hamstersHabitat.logicalThreads;\n    this.habitat = hamstersHabitat;\n    this.data = hamstersData;\n    this.pool = hamstersPool;\n    this.logger = hamstersLogger;\n    this.memoizer = hamstersMemoizer;\n    this.run = this.hamstersRun;\n    this.promise = this.hamstersPromise;\n    this.init = this.initializeLibrary;\n  }\n\n  /**\n  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.logger.info(`Preparing the hamster wheels & readying hamsters`);\n    if (typeof startOptions !== 'undefined') {\n      this.processStartOptions(startOptions);\n    }\n    hamstersPool.spawnHamsters(hamstersHabitat.persistence, hamstersPool.selectHamsterWheel(), this.maxThreads);\n    delete this.init;\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    // Add options to override library environment behavior\n    let habitatKeys = [\n      'worker', 'sharedworker',\n      'legacy', 'webworker',\n      'reactnative', 'atomics',\n      'proxies', 'transferrable',\n      'browser', 'shell', \n      'node', 'debug',\n      'persistence', 'importscripts'\n    ];\n    for (var key in startOptions) {\n      if (startOptions.hasOwnProperty(key)) {\n        if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    if(typeof this.habitat.Worker === 'function') {\n      this.habitat.legacy = false;\n    }\n  }\n\n  /**\n  * @constructor\n  * @function hamstersTask - Constructs a new task object from provided arguments\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {object} scope - Reference to main library context\n  * @return {object} new Hamsters.js task\n  */\n  hamstersTask(params, functionToRun, scope) {\n    this.id = scope.pool.tasks.length;\n    this.count = 0;\n    this.aggregate = (params.aggregate || false);\n    this.output = [];\n    this.workers = [];\n    this.memoize = (params.memoize || false);\n    this.dataType = (params.dataType ? params.dataType.toLowerCase() : null);\n    this.input = params;\n    // Do not modify function if we're running on the main thread for legacy fallback\n    if(hamstersHabitat.legacy) {\n      this.threads = 1;\n      this.input.hamstersJob = functionToRun;\n    } else {\n      this.threads = (params.threads || 1);\n      this.input.hamstersJob = scope.data.prepareJob(functionToRun);\n    }\n  }\n\n  /**\n  * @async\n  * @function hamstersPromise - Calls library functionality using async promises\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {array} Results from functionToRun.\n  */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      let task = new this.hamstersTask(params, functionToRun, this);\n      this.pool.scheduleTask(task, this.habitat.persistence, scaffold, this.maxThreads).then((results) => {\n        resolve(results);\n      }).catch((error) => {\n        hamstersLogger.error(error.messsage, reject);\n      });\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {function} onSuccess - Function to call upon successful execution\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    let task = new this.hamstersTask(params, functionToRun, this);\n    let scaffold = hamstersPool.selectHamsterWheel();\n    this.pool.scheduleTask(task, this.habitat.persistence, scaffold, this.maxThreads).then((results) => {\n      onSuccess(results);\n    }).catch((error) => {\n      hamstersLogger.error(error.messsage, onError);\n    });\n  }\n}\n\nvar hamsters = new hamstersjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsters;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/hamsters.js"],"sourceRoot":""}